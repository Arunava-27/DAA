#include <stdio.h>
#include <stdbool.h>

#define N 5 // Size of the maze

void printSolution(int sol[N][N])
{
    // Print the solution
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", sol[i][j]);
        }
        printf("\n");
    }
}

bool isSafe(int maze[N][N], int x, int y)
{
    // Check if (x,y) is a valid position
    if (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1) {
        return true;
    }
    return false;
}

bool solveMazeUtil(int maze[N][N], int x, int y, int sol[N][N])
{
    // Check if (x,y) is the destination
    if (x == N-1 && y == N-1) {
        sol[x][y] = 1;
        return true;
    }

    // Check if (x,y) is a valid position
    if (isSafe(maze, x, y)) {
        // Mark (x,y) as part of solution path
        sol[x][y] = 1;

        // Move right
        if (solveMazeUtil(maze, x, y+1, sol)) {
            return true;
        }

        // Move down
        if (solveMazeUtil(maze, x+1, y, sol)) {
            return true;
        }

        // Unmark (x,y) as part of solution path
        sol[x][y] = 0;
    }

    return false;
}

void solveMaze(int maze[N][N])
{
    int sol[N][N] = {0};

    if (solveMazeUtil(maze, 0, 0, sol) == false) {
        printf("No solution found\n");
        return;
    }

    printSolution(sol);
}

int main()
{
    int x,maze[N][N];

    // Read input from user
    printf("Enter the maze:\n");
    scanf("%d" , &x);
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < x; j++) {
            scanf("%d", &maze[i][j]);
        }
    }

    solveMaze(maze);

    return 0;
}
