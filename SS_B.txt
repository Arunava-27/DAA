#include <stdio.h>
#include <stdbool.h>

#define MAX 10 // Maximum number of elements in the set

void printSolution(int sol[MAX], int n)
{
    // Print the solution
    printf("Subset: ");
    for (int i = 0; i < n; i++) {
        if (sol[i] == 1) {
            printf("%d ", i+1);
        }
    }
    printf("\n");
}

bool isSafe(int set[MAX], int n, int sum, int currSum, int index)
{
    // Check if the current sum is equal to the required sum
    if (sum == currSum) {
        return true;
    }

    // Check if the current index is out of bounds or if the current sum is greater than the required sum
    if (index >= n || currSum > sum) {
        return false;
    }

    return true;
}

bool solveSubsetSumUtil(int set[MAX], int n, int sum, int currSum, int sol[MAX], int index)
{
    // Check if the current sum is equal to the required sum
    if (currSum == sum) {
        printSolution(sol, n);
        return true;
    }

    // Check if the current index is out of bounds or if the current sum is greater than the required sum
    if (index >= n || currSum > sum) {
        return false;
    }

    // Include the current element in the subset
    sol[index] = 1;
    if (solveSubsetSumUtil(set, n, sum, currSum+set[index], sol, index+1)) {
        return true;
    }

    // Exclude the current element from the subset
    sol[index] = 0;
    if (solveSubsetSumUtil(set, n, sum, currSum, sol, index+1)) {
        return true;
    }

    return false;
}

void solveSubsetSum(int set[MAX], int n, int sum)
{
    int sol[MAX] = {0};

    if (solveSubsetSumUtil(set, n, sum, 0, sol, 0) == false) {
        printf("No subset found\n");
    }
}

int main()
{
    int n, set[MAX], sum;

    // Read input from user
    printf("Enter the size of the set: ");
    scanf("%d", &n);
    printf("Enter the elements of the set:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }
    printf("Enter the required sum: ");
    scanf("%d", &sum);

    solveSubsetSum(set, n, sum);

    return 0;
}
